using Frends.MongoDB.Query.Definitions;
using System.ComponentModel;
using System;
using System.Threading;
using MongoDB.Bson;
using MongoDB.Driver;
using MongoDB.Bson.IO;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Frends.MongoDB.Query;

/// <summary>
/// MongoDB Task.
/// </summary>
public class MongoDB
{
    /// <summary>
    /// MongoDB query operation.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.MongoDB.Query)
    /// </summary>
    /// <param name="input">Input parameters.</param>
    /// <param name="connection">Connection parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this task.</param>
    /// <returns>Object { bool Success, List&lt;string&gt; Data }</returns>
    public static async Task<Result> Query([PropertyTab] Input input, [PropertyTab] Connection connection, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(input.Filter))
            throw new Exception("Query error: Filter can't be null.");

        try
        {
            var li = new List<string>();
            var jsonSettings = new JsonWriterSettings { OutputMode = JsonOutputMode.CanonicalExtendedJson };
            var collection = GetMongoCollection(connection.ConnectionString, connection.Database, connection.CollectionName);
			
			if (input.QueryOptions == QueryOptions.QueryOne)
			{
				var document = await collection.Find(input.Filter).FirstOrDefaultAsync(cancellationToken);
				if (document != null)
					li.Add(document.ToJson(jsonSettings));
			}
			else
			{
				var cursor = await collection.Find(input.Filter).ToCursorAsync(cancellationToken);

				foreach (var document in cursor.ToEnumerable(cancellationToken: cancellationToken))
					li.Add(document.ToJson(jsonSettings));
			}
			
            return new Result(true, li);
        }
        catch (Exception ex)
        {
            throw new Exception($"Query error: {ex}");
        }
    }

    private static IMongoCollection<BsonDocument> GetMongoCollection(string connectionString, string database, string collectionName)
    {
        try
        {
            var dataBase = GetMongoDatabase(connectionString, database);
            var collection = dataBase.GetCollection<BsonDocument>(collectionName);
            return collection;
        }
        catch (Exception ex)
        {
            throw new Exception($"GetMongoCollection error: {ex}");
        }
    }

    private static IMongoDatabase GetMongoDatabase(string connectionString, string database)
    {
        try
        {
            var mongoClient = new MongoClient(connectionString);
            var dataBase = mongoClient.GetDatabase(database);
            return dataBase;
        }
        catch (Exception ex)
        {
            throw new Exception($"GetMongoDatabase error: {ex}");
        }
    }
}